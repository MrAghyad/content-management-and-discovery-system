"""init models

Revision ID: 1fbe8b4c1564
Revises: 
Create Date: 2025-08-14 20:12:44.060773+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1fbe8b4c1564'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
                    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
                    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'),
                              autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
                    )

    op.create_table('roles',
                    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('name', postgresql.ENUM('admin', 'editor', 'viewer', name='role_name'),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'),
                              autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('roles_pkey')),
                    sa.UniqueConstraint('name', name=op.f('roles_name_key'), postgresql_include=[],
                                        postgresql_nulls_not_distinct=False)
                    )
    op.create_table('user_roles',
                    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('role_id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('user_roles_role_id_fkey'),
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_roles_user_id_fkey'),
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('uq_user_role'))
                    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('contents',
                    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
                    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('language', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
                    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('publication_date', sa.DATE(), autoincrement=False, nullable=True),
                    sa.Column('status', postgresql.ENUM('draft', 'published', name='content_status'),
                              autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'),
                              autoincrement=False, nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'),
                              autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name='contents_pkey'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('categories',
                    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
                    sa.UniqueConstraint('name', name='uq_categories_name', postgresql_include=[],
                                        postgresql_nulls_not_distinct=False),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('content_categories',
                    sa.Column('content_id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['category_id'], ['categories.id'],
                                            name=op.f('content_categories_category_id_fkey'), ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['content_id'], ['contents.id'],
                                            name=op.f('content_categories_content_id_fkey'), ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('content_id', 'category_id', name=op.f('content_categories_pkey'))
                    )
    op.create_table('content_media',
                    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('content_id', sa.UUID(), autoincrement=False, nullable=False),
                    sa.Column('media_type', postgresql.ENUM('audio', 'video', name='media_type'), autoincrement=False,
                              nullable=False),
                    sa.Column('source', postgresql.ENUM('upload', 'external', name='media_source'), autoincrement=False,
                              nullable=False),
                    sa.Column('media_provider', postgresql.ENUM('team', 'youtube', name='media_provider'),
                              autoincrement=False, nullable=False),
                    sa.Column('media_file', sa.VARCHAR(length=512), autoincrement=False, nullable=True),
                    sa.Column('external_url', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'),
                              autoincrement=False, nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['content_id'], ['contents.id'], name=op.f('content_media_content_id_fkey'),
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name=op.f('content_media_pkey')),
                    sa.UniqueConstraint('content_id', name=op.f('uq_content_media_content'), postgresql_include=[],
                                        postgresql_nulls_not_distinct=False)
                    )



def downgrade() -> None:
    op.drop_table('users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('roles')
    op.drop_table('user_roles')
    op.drop_table('contents')
    op.drop_table('categories')
    op.drop_table('content_media')
    op.drop_table('content_categories')